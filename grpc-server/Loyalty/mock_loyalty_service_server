// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\kit\go\pkg\mod\github.com\!leleria\!contract@v0.0.24\GeneratedFilesProtoBufGo\ServiceLoyalty_grpc.pb.go

// Package mock_sl is a generated GoMock package.
package mock_sl

import (
	context "context"
	reflect "reflect"

	sl "github.com/Leleria/Contract/GeneratedFilesProtoBufGo"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLoyaltyServiceClient is a mock of LoyaltyServiceClient interface.
type MockLoyaltyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltyServiceClientMockRecorder
}

// MockLoyaltyServiceClientMockRecorder is the mock recorder for MockLoyaltyServiceClient.
type MockLoyaltyServiceClientMockRecorder struct {
	mock *MockLoyaltyServiceClient
}

// NewMockLoyaltyServiceClient creates a new mock instance.
func NewMockLoyaltyServiceClient(ctrl *gomock.Controller) *MockLoyaltyServiceClient {
	mock := &MockLoyaltyServiceClient{ctrl: ctrl}
	mock.recorder = &MockLoyaltyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltyServiceClient) EXPECT() *MockLoyaltyServiceClientMockRecorder {
	return m.recorder
}

// AccrualBonusesCashback mocks base method.
func (m *MockLoyaltyServiceClient) AccrualBonusesCashback(ctx context.Context, in *sl.AccrualBonusesCashbackRequest, opts ...grpc.CallOption) (*sl.AccrualBonusesCashbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccrualBonusesCashback", varargs...)
	ret0, _ := ret[0].(*sl.AccrualBonusesCashbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccrualBonusesCashback indicates an expected call of AccrualBonusesCashback.
func (mr *MockLoyaltyServiceClientMockRecorder) AccrualBonusesCashback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualBonusesCashback", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).AccrualBonusesCashback), varargs...)
}

// AddNewPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) AddNewPromoCode(ctx context.Context, in *sl.AddNewPromoCodeRequest, opts ...grpc.CallOption) (*sl.AddNewPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNewPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.AddNewPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewPromoCode indicates an expected call of AddNewPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) AddNewPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).AddNewPromoCode), varargs...)
}

// AddPersonalPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) AddPersonalPromoCode(ctx context.Context, in *sl.AddPersonalPromoCodeRequest, opts ...grpc.CallOption) (*sl.AddPersonalPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPersonalPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.AddPersonalPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPersonalPromoCode indicates an expected call of AddPersonalPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) AddPersonalPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersonalPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).AddPersonalPromoCode), varargs...)
}

// CalculatePriceWithBonuses mocks base method.
func (m *MockLoyaltyServiceClient) CalculatePriceWithBonuses(ctx context.Context, in *sl.CalculatePriceWithBonusesRequest, opts ...grpc.CallOption) (*sl.CalculatePriceWithBonusesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculatePriceWithBonuses", varargs...)
	ret0, _ := ret[0].(*sl.CalculatePriceWithBonusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePriceWithBonuses indicates an expected call of CalculatePriceWithBonuses.
func (mr *MockLoyaltyServiceClientMockRecorder) CalculatePriceWithBonuses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePriceWithBonuses", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).CalculatePriceWithBonuses), varargs...)
}

// CalculatePriceWithPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) CalculatePriceWithPromoCode(ctx context.Context, in *sl.CalculatePriceWithPromoCodeRequest, opts ...grpc.CallOption) (*sl.CalculatePriceWithPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculatePriceWithPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.CalculatePriceWithPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePriceWithPromoCode indicates an expected call of CalculatePriceWithPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) CalculatePriceWithPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePriceWithPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).CalculatePriceWithPromoCode), varargs...)
}

// ChangeBudgetCashBack mocks base method.
func (m *MockLoyaltyServiceClient) ChangeBudgetCashBack(ctx context.Context, in *sl.ChangeBudgetCashBackRequest, opts ...grpc.CallOption) (*sl.ChangeBudgetCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeBudgetCashBack", varargs...)
	ret0, _ := ret[0].(*sl.ChangeBudgetCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBudgetCashBack indicates an expected call of ChangeBudgetCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeBudgetCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBudgetCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeBudgetCashBack), varargs...)
}

// ChangeConditionCashBack mocks base method.
func (m *MockLoyaltyServiceClient) ChangeConditionCashBack(ctx context.Context, in *sl.ChangeConditionCashBackRequest, opts ...grpc.CallOption) (*sl.ChangeConditionCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeConditionCashBack", varargs...)
	ret0, _ := ret[0].(*sl.ChangeConditionCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeConditionCashBack indicates an expected call of ChangeConditionCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeConditionCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeConditionCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeConditionCashBack), varargs...)
}

// ChangeDateFinishActivePromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeDateFinishActivePromoCode(ctx context.Context, in *sl.ChangeDateFinishActivePromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeDateFinishActivePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeDateFinishActivePromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeDateFinishActivePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDateFinishActivePromoCode indicates an expected call of ChangeDateFinishActivePromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeDateFinishActivePromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDateFinishActivePromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeDateFinishActivePromoCode), varargs...)
}

// ChangeDateStartActivePromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeDateStartActivePromoCode(ctx context.Context, in *sl.ChangeDateStartActivePromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeDateStartActivePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeDateStartActivePromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeDateStartActivePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDateStartActivePromoCode indicates an expected call of ChangeDateStartActivePromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeDateStartActivePromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDateStartActivePromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeDateStartActivePromoCode), varargs...)
}

// ChangeMaxCountUsesPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeMaxCountUsesPromoCode(ctx context.Context, in *sl.ChangeMaxCountUsesPromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeMaxCountUsesPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeMaxCountUsesPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeMaxCountUsesPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMaxCountUsesPromoCode indicates an expected call of ChangeMaxCountUsesPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeMaxCountUsesPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMaxCountUsesPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeMaxCountUsesPromoCode), varargs...)
}

// ChangeNamePromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeNamePromoCode(ctx context.Context, in *sl.ChangeNamePromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeNamePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeNamePromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeNamePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeNamePromoCode indicates an expected call of ChangeNamePromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeNamePromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeNamePromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeNamePromoCode), varargs...)
}

// ChangeTypeCashBack mocks base method.
func (m *MockLoyaltyServiceClient) ChangeTypeCashBack(ctx context.Context, in *sl.ChangeTypeCashBackRequest, opts ...grpc.CallOption) (*sl.ChangeTypeCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeTypeCashBack", varargs...)
	ret0, _ := ret[0].(*sl.ChangeTypeCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTypeCashBack indicates an expected call of ChangeTypeCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeTypeCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTypeCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeTypeCashBack), varargs...)
}

// ChangeTypeDiscountPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeTypeDiscountPromoCode(ctx context.Context, in *sl.ChangeTypeDiscountPromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeTypeDiscountPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeTypeDiscountPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeTypeDiscountPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTypeDiscountPromoCode indicates an expected call of ChangeTypeDiscountPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeTypeDiscountPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTypeDiscountPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeTypeDiscountPromoCode), varargs...)
}

// ChangeValueDiscountPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) ChangeValueDiscountPromoCode(ctx context.Context, in *sl.ChangeValueDiscountPromoCodeRequest, opts ...grpc.CallOption) (*sl.ChangeValueDiscountPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeValueDiscountPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.ChangeValueDiscountPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeValueDiscountPromoCode indicates an expected call of ChangeValueDiscountPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) ChangeValueDiscountPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeValueDiscountPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).ChangeValueDiscountPromoCode), varargs...)
}

// DebitingPromoBonuses mocks base method.
func (m *MockLoyaltyServiceClient) DebitingPromoBonuses(ctx context.Context, in *sl.DebitingPromoBonusesRequest, opts ...grpc.CallOption) (*sl.DebitingPromoBonusesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DebitingPromoBonuses", varargs...)
	ret0, _ := ret[0].(*sl.DebitingPromoBonusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitingPromoBonuses indicates an expected call of DebitingPromoBonuses.
func (mr *MockLoyaltyServiceClientMockRecorder) DebitingPromoBonuses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitingPromoBonuses", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).DebitingPromoBonuses), varargs...)
}

// DeleteCashBack mocks base method.
func (m *MockLoyaltyServiceClient) DeleteCashBack(ctx context.Context, in *sl.DeleteCashBackRequest, opts ...grpc.CallOption) (*sl.DeleteCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCashBack", varargs...)
	ret0, _ := ret[0].(*sl.DeleteCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCashBack indicates an expected call of DeleteCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) DeleteCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).DeleteCashBack), varargs...)
}

// DeletePromoCode mocks base method.
func (m *MockLoyaltyServiceClient) DeletePromoCode(ctx context.Context, in *sl.DeletePromoCodeRequest, opts ...grpc.CallOption) (*sl.DeletePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePromoCode", varargs...)
	ret0, _ := ret[0].(*sl.DeletePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePromoCode indicates an expected call of DeletePromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) DeletePromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).DeletePromoCode), varargs...)
}

// GetAllCashBack mocks base method.
func (m *MockLoyaltyServiceClient) GetAllCashBack(ctx context.Context, in *sl.GetAllCashBackRequest, opts ...grpc.CallOption) (*sl.GetAllCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllCashBack", varargs...)
	ret0, _ := ret[0].(*sl.GetAllCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCashBack indicates an expected call of GetAllCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) GetAllCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).GetAllCashBack), varargs...)
}

// GetAllPromoCodes mocks base method.
func (m *MockLoyaltyServiceClient) GetAllPromoCodes(ctx context.Context, in *sl.GetAllPromoCodesRequest, opts ...grpc.CallOption) (*sl.GetAllPromoCodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPromoCodes", varargs...)
	ret0, _ := ret[0].(*sl.GetAllPromoCodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPromoCodes indicates an expected call of GetAllPromoCodes.
func (mr *MockLoyaltyServiceClientMockRecorder) GetAllPromoCodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPromoCodes", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).GetAllPromoCodes), varargs...)
}

// GetCashBack mocks base method.
func (m *MockLoyaltyServiceClient) GetCashBack(ctx context.Context, in *sl.GetCashBackRequest, opts ...grpc.CallOption) (*sl.GetCashBackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCashBack", varargs...)
	ret0, _ := ret[0].(*sl.GetCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCashBack indicates an expected call of GetCashBack.
func (mr *MockLoyaltyServiceClientMockRecorder) GetCashBack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCashBack", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).GetCashBack), varargs...)
}

// GetPromoCode mocks base method.
func (m *MockLoyaltyServiceClient) GetPromoCode(ctx context.Context, in *sl.GetPromoCodeRequest, opts ...grpc.CallOption) (*sl.GetPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPromoCode", varargs...)
	ret0, _ := ret[0].(*sl.GetPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoCode indicates an expected call of GetPromoCode.
func (mr *MockLoyaltyServiceClientMockRecorder) GetPromoCode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoCode", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).GetPromoCode), varargs...)
}

// SettingUpBudget mocks base method.
func (m *MockLoyaltyServiceClient) SettingUpBudget(ctx context.Context, in *sl.SettingUpBudgetRequest, opts ...grpc.CallOption) (*sl.SettingUpBudgetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SettingUpBudget", varargs...)
	ret0, _ := ret[0].(*sl.SettingUpBudgetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingUpBudget indicates an expected call of SettingUpBudget.
func (mr *MockLoyaltyServiceClientMockRecorder) SettingUpBudget(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingUpBudget", reflect.TypeOf((*MockLoyaltyServiceClient)(nil).SettingUpBudget), varargs...)
}

// MockLoyaltyServiceServer is a mock of LoyaltyServiceServer interface.
type MockLoyaltyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltyServiceServerMockRecorder
}

// MockLoyaltyServiceServerMockRecorder is the mock recorder for MockLoyaltyServiceServer.
type MockLoyaltyServiceServerMockRecorder struct {
	mock *MockLoyaltyServiceServer
}

// NewMockLoyaltyServiceServer creates a new mock instance.
func NewMockLoyaltyServiceServer(ctrl *gomock.Controller) *MockLoyaltyServiceServer {
	mock := &MockLoyaltyServiceServer{ctrl: ctrl}
	mock.recorder = &MockLoyaltyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltyServiceServer) EXPECT() *MockLoyaltyServiceServerMockRecorder {
	return m.recorder
}

// AccrualBonusesCashback mocks base method.
func (m *MockLoyaltyServiceServer) AccrualBonusesCashback(arg0 context.Context, arg1 *sl.AccrualBonusesCashbackRequest) (*sl.AccrualBonusesCashbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualBonusesCashback", arg0, arg1)
	ret0, _ := ret[0].(*sl.AccrualBonusesCashbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccrualBonusesCashback indicates an expected call of AccrualBonusesCashback.
func (mr *MockLoyaltyServiceServerMockRecorder) AccrualBonusesCashback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualBonusesCashback", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).AccrualBonusesCashback), arg0, arg1)
}

// AddNewPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) AddNewPromoCode(arg0 context.Context, arg1 *sl.AddNewPromoCodeRequest) (*sl.AddNewPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.AddNewPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewPromoCode indicates an expected call of AddNewPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) AddNewPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).AddNewPromoCode), arg0, arg1)
}

// AddPersonalPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) AddPersonalPromoCode(arg0 context.Context, arg1 *sl.AddPersonalPromoCodeRequest) (*sl.AddPersonalPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPersonalPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.AddPersonalPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPersonalPromoCode indicates an expected call of AddPersonalPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) AddPersonalPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersonalPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).AddPersonalPromoCode), arg0, arg1)
}

// CalculatePriceWithBonuses mocks base method.
func (m *MockLoyaltyServiceServer) CalculatePriceWithBonuses(arg0 context.Context, arg1 *sl.CalculatePriceWithBonusesRequest) (*sl.CalculatePriceWithBonusesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePriceWithBonuses", arg0, arg1)
	ret0, _ := ret[0].(*sl.CalculatePriceWithBonusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePriceWithBonuses indicates an expected call of CalculatePriceWithBonuses.
func (mr *MockLoyaltyServiceServerMockRecorder) CalculatePriceWithBonuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePriceWithBonuses", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).CalculatePriceWithBonuses), arg0, arg1)
}

// CalculatePriceWithPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) CalculatePriceWithPromoCode(arg0 context.Context, arg1 *sl.CalculatePriceWithPromoCodeRequest) (*sl.CalculatePriceWithPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePriceWithPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.CalculatePriceWithPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculatePriceWithPromoCode indicates an expected call of CalculatePriceWithPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) CalculatePriceWithPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePriceWithPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).CalculatePriceWithPromoCode), arg0, arg1)
}

// ChangeBudgetCashBack mocks base method.
func (m *MockLoyaltyServiceServer) ChangeBudgetCashBack(arg0 context.Context, arg1 *sl.ChangeBudgetCashBackRequest) (*sl.ChangeBudgetCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBudgetCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeBudgetCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBudgetCashBack indicates an expected call of ChangeBudgetCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeBudgetCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBudgetCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeBudgetCashBack), arg0, arg1)
}

// ChangeConditionCashBack mocks base method.
func (m *MockLoyaltyServiceServer) ChangeConditionCashBack(arg0 context.Context, arg1 *sl.ChangeConditionCashBackRequest) (*sl.ChangeConditionCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeConditionCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeConditionCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeConditionCashBack indicates an expected call of ChangeConditionCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeConditionCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeConditionCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeConditionCashBack), arg0, arg1)
}

// ChangeDateFinishActivePromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeDateFinishActivePromoCode(arg0 context.Context, arg1 *sl.ChangeDateFinishActivePromoCodeRequest) (*sl.ChangeDateFinishActivePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDateFinishActivePromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeDateFinishActivePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDateFinishActivePromoCode indicates an expected call of ChangeDateFinishActivePromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeDateFinishActivePromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDateFinishActivePromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeDateFinishActivePromoCode), arg0, arg1)
}

// ChangeDateStartActivePromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeDateStartActivePromoCode(arg0 context.Context, arg1 *sl.ChangeDateStartActivePromoCodeRequest) (*sl.ChangeDateStartActivePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDateStartActivePromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeDateStartActivePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDateStartActivePromoCode indicates an expected call of ChangeDateStartActivePromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeDateStartActivePromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDateStartActivePromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeDateStartActivePromoCode), arg0, arg1)
}

// ChangeMaxCountUsesPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeMaxCountUsesPromoCode(arg0 context.Context, arg1 *sl.ChangeMaxCountUsesPromoCodeRequest) (*sl.ChangeMaxCountUsesPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMaxCountUsesPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeMaxCountUsesPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMaxCountUsesPromoCode indicates an expected call of ChangeMaxCountUsesPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeMaxCountUsesPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMaxCountUsesPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeMaxCountUsesPromoCode), arg0, arg1)
}

// ChangeNamePromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeNamePromoCode(arg0 context.Context, arg1 *sl.ChangeNamePromoCodeRequest) (*sl.ChangeNamePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeNamePromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeNamePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeNamePromoCode indicates an expected call of ChangeNamePromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeNamePromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeNamePromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeNamePromoCode), arg0, arg1)
}

// ChangeTypeCashBack mocks base method.
func (m *MockLoyaltyServiceServer) ChangeTypeCashBack(arg0 context.Context, arg1 *sl.ChangeTypeCashBackRequest) (*sl.ChangeTypeCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTypeCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeTypeCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTypeCashBack indicates an expected call of ChangeTypeCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeTypeCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTypeCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeTypeCashBack), arg0, arg1)
}

// ChangeTypeDiscountPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeTypeDiscountPromoCode(arg0 context.Context, arg1 *sl.ChangeTypeDiscountPromoCodeRequest) (*sl.ChangeTypeDiscountPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTypeDiscountPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeTypeDiscountPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTypeDiscountPromoCode indicates an expected call of ChangeTypeDiscountPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeTypeDiscountPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTypeDiscountPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeTypeDiscountPromoCode), arg0, arg1)
}

// ChangeValueDiscountPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) ChangeValueDiscountPromoCode(arg0 context.Context, arg1 *sl.ChangeValueDiscountPromoCodeRequest) (*sl.ChangeValueDiscountPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeValueDiscountPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.ChangeValueDiscountPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeValueDiscountPromoCode indicates an expected call of ChangeValueDiscountPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) ChangeValueDiscountPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeValueDiscountPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).ChangeValueDiscountPromoCode), arg0, arg1)
}

// DebitingPromoBonuses mocks base method.
func (m *MockLoyaltyServiceServer) DebitingPromoBonuses(arg0 context.Context, arg1 *sl.DebitingPromoBonusesRequest) (*sl.DebitingPromoBonusesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitingPromoBonuses", arg0, arg1)
	ret0, _ := ret[0].(*sl.DebitingPromoBonusesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitingPromoBonuses indicates an expected call of DebitingPromoBonuses.
func (mr *MockLoyaltyServiceServerMockRecorder) DebitingPromoBonuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitingPromoBonuses", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).DebitingPromoBonuses), arg0, arg1)
}

// DeleteCashBack mocks base method.
func (m *MockLoyaltyServiceServer) DeleteCashBack(arg0 context.Context, arg1 *sl.DeleteCashBackRequest) (*sl.DeleteCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.DeleteCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCashBack indicates an expected call of DeleteCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) DeleteCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).DeleteCashBack), arg0, arg1)
}

// DeletePromoCode mocks base method.
func (m *MockLoyaltyServiceServer) DeletePromoCode(arg0 context.Context, arg1 *sl.DeletePromoCodeRequest) (*sl.DeletePromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.DeletePromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePromoCode indicates an expected call of DeletePromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) DeletePromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).DeletePromoCode), arg0, arg1)
}

// GetAllCashBack mocks base method.
func (m *MockLoyaltyServiceServer) GetAllCashBack(arg0 context.Context, arg1 *sl.GetAllCashBackRequest) (*sl.GetAllCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.GetAllCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCashBack indicates an expected call of GetAllCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) GetAllCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).GetAllCashBack), arg0, arg1)
}

// GetAllPromoCodes mocks base method.
func (m *MockLoyaltyServiceServer) GetAllPromoCodes(arg0 context.Context, arg1 *sl.GetAllPromoCodesRequest) (*sl.GetAllPromoCodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPromoCodes", arg0, arg1)
	ret0, _ := ret[0].(*sl.GetAllPromoCodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPromoCodes indicates an expected call of GetAllPromoCodes.
func (mr *MockLoyaltyServiceServerMockRecorder) GetAllPromoCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPromoCodes", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).GetAllPromoCodes), arg0, arg1)
}

// GetCashBack mocks base method.
func (m *MockLoyaltyServiceServer) GetCashBack(arg0 context.Context, arg1 *sl.GetCashBackRequest) (*sl.GetCashBackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCashBack", arg0, arg1)
	ret0, _ := ret[0].(*sl.GetCashBackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCashBack indicates an expected call of GetCashBack.
func (mr *MockLoyaltyServiceServerMockRecorder) GetCashBack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCashBack", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).GetCashBack), arg0, arg1)
}

// GetPromoCode mocks base method.
func (m *MockLoyaltyServiceServer) GetPromoCode(arg0 context.Context, arg1 *sl.GetPromoCodeRequest) (*sl.GetPromoCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromoCode", arg0, arg1)
	ret0, _ := ret[0].(*sl.GetPromoCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoCode indicates an expected call of GetPromoCode.
func (mr *MockLoyaltyServiceServerMockRecorder) GetPromoCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoCode", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).GetPromoCode), arg0, arg1)
}

// SettingUpBudget mocks base method.
func (m *MockLoyaltyServiceServer) SettingUpBudget(arg0 context.Context, arg1 *sl.SettingUpBudgetRequest) (*sl.SettingUpBudgetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingUpBudget", arg0, arg1)
	ret0, _ := ret[0].(*sl.SettingUpBudgetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingUpBudget indicates an expected call of SettingUpBudget.
func (mr *MockLoyaltyServiceServerMockRecorder) SettingUpBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingUpBudget", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).SettingUpBudget), arg0, arg1)
}

// mustEmbedUnimplementedLoyaltyServiceServer mocks base method.
func (m *MockLoyaltyServiceServer) mustEmbedUnimplementedLoyaltyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoyaltyServiceServer")
}

// mustEmbedUnimplementedLoyaltyServiceServer indicates an expected call of mustEmbedUnimplementedLoyaltyServiceServer.
func (mr *MockLoyaltyServiceServerMockRecorder) mustEmbedUnimplementedLoyaltyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoyaltyServiceServer", reflect.TypeOf((*MockLoyaltyServiceServer)(nil).mustEmbedUnimplementedLoyaltyServiceServer))
}

// MockUnsafeLoyaltyServiceServer is a mock of UnsafeLoyaltyServiceServer interface.
type MockUnsafeLoyaltyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLoyaltyServiceServerMockRecorder
}

// MockUnsafeLoyaltyServiceServerMockRecorder is the mock recorder for MockUnsafeLoyaltyServiceServer.
type MockUnsafeLoyaltyServiceServerMockRecorder struct {
	mock *MockUnsafeLoyaltyServiceServer
}

// NewMockUnsafeLoyaltyServiceServer creates a new mock instance.
func NewMockUnsafeLoyaltyServiceServer(ctrl *gomock.Controller) *MockUnsafeLoyaltyServiceServer {
	mock := &MockUnsafeLoyaltyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLoyaltyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLoyaltyServiceServer) EXPECT() *MockUnsafeLoyaltyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLoyaltyServiceServer mocks base method.
func (m *MockUnsafeLoyaltyServiceServer) mustEmbedUnimplementedLoyaltyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLoyaltyServiceServer")
}

// mustEmbedUnimplementedLoyaltyServiceServer indicates an expected call of mustEmbedUnimplementedLoyaltyServiceServer.
func (mr *MockUnsafeLoyaltyServiceServerMockRecorder) mustEmbedUnimplementedLoyaltyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLoyaltyServiceServer", reflect.TypeOf((*MockUnsafeLoyaltyServiceServer)(nil).mustEmbedUnimplementedLoyaltyServiceServer))
}
