// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Loyalty is an autogenerated mock type for the Loyalty type
type Loyalty struct {
	mock.Mock
}

// AccrualBonusesCashback provides a mock function with given fields: ctx, idClient, idCashBack
func (_m *Loyalty) AccrualBonusesCashback(ctx context.Context, idClient int32, idCashBack int32) (string, error) {
	ret := _m.Called(ctx, idClient, idCashBack)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (string, error)); ok {
		return rf(ctx, idClient, idCashBack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) string); ok {
		r0 = rf(ctx, idClient, idCashBack)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, idClient, idCashBack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNewPromoCode provides a mock function with given fields: ctx, name, typeDiscount, valueDiscount, dateStartActive, dateFinishActive, maxCountUses
func (_m *Loyalty) AddNewPromoCode(ctx context.Context, name string, typeDiscount int32, valueDiscount int32, dateStartActive string, dateFinishActive string, maxCountUses int32) (string, error) {
	ret := _m.Called(ctx, name, typeDiscount, valueDiscount, dateStartActive, dateFinishActive, maxCountUses)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32, string, string, int32) (string, error)); ok {
		return rf(ctx, name, typeDiscount, valueDiscount, dateStartActive, dateFinishActive, maxCountUses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32, string, string, int32) string); ok {
		r0 = rf(ctx, name, typeDiscount, valueDiscount, dateStartActive, dateFinishActive, maxCountUses)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32, string, string, int32) error); ok {
		r1 = rf(ctx, name, typeDiscount, valueDiscount, dateStartActive, dateFinishActive, maxCountUses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPersonalPromoCode provides a mock function with given fields: ctx, idClient, idGroup, namePromoCode, typeDiscount, valueDiscount, dateStartActive, dateFinishActive
func (_m *Loyalty) AddPersonalPromoCode(ctx context.Context, idClient int32, idGroup int32, namePromoCode string, typeDiscount int32, valueDiscount int32, dateStartActive string, dateFinishActive string) (string, error) {
	ret := _m.Called(ctx, idClient, idGroup, namePromoCode, typeDiscount, valueDiscount, dateStartActive, dateFinishActive)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string, int32, int32, string, string) (string, error)); ok {
		return rf(ctx, idClient, idGroup, namePromoCode, typeDiscount, valueDiscount, dateStartActive, dateFinishActive)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string, int32, int32, string, string) string); ok {
		r0 = rf(ctx, idClient, idGroup, namePromoCode, typeDiscount, valueDiscount, dateStartActive, dateFinishActive)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, string, int32, int32, string, string) error); ok {
		r1 = rf(ctx, idClient, idGroup, namePromoCode, typeDiscount, valueDiscount, dateStartActive, dateFinishActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculatePriceWithBonuses provides a mock function with given fields: ctx, idClient, amountProduct
func (_m *Loyalty) CalculatePriceWithBonuses(ctx context.Context, idClient int32, amountProduct float32) (string, float32, float32, error) {
	ret := _m.Called(ctx, idClient, amountProduct)

	var r0 string
	var r1 float32
	var r2 float32
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, float32) (string, float32, float32, error)); ok {
		return rf(ctx, idClient, amountProduct)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, float32) string); ok {
		r0 = rf(ctx, idClient, amountProduct)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, float32) float32); ok {
		r1 = rf(ctx, idClient, amountProduct)
	} else {
		r1 = ret.Get(1).(float32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, float32) float32); ok {
		r2 = rf(ctx, idClient, amountProduct)
	} else {
		r2 = ret.Get(2).(float32)
	}

	if rf, ok := ret.Get(3).(func(context.Context, int32, float32) error); ok {
		r3 = rf(ctx, idClient, amountProduct)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CalculatePriceWithPromoCode provides a mock function with given fields: ctx, idClient, namePromoCode, amountProduct
func (_m *Loyalty) CalculatePriceWithPromoCode(ctx context.Context, idClient int32, namePromoCode string, amountProduct float32) (string, float32, float32, error) {
	ret := _m.Called(ctx, idClient, namePromoCode, amountProduct)

	var r0 string
	var r1 float32
	var r2 float32
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, float32) (string, float32, float32, error)); ok {
		return rf(ctx, idClient, namePromoCode, amountProduct)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, float32) string); ok {
		r0 = rf(ctx, idClient, namePromoCode, amountProduct)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, float32) float32); ok {
		r1 = rf(ctx, idClient, namePromoCode, amountProduct)
	} else {
		r1 = ret.Get(1).(float32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string, float32) float32); ok {
		r2 = rf(ctx, idClient, namePromoCode, amountProduct)
	} else {
		r2 = ret.Get(2).(float32)
	}

	if rf, ok := ret.Get(3).(func(context.Context, int32, string, float32) error); ok {
		r3 = rf(ctx, idClient, namePromoCode, amountProduct)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ChangeBudgetCashBack provides a mock function with given fields: ctx, idCashBack, budget
func (_m *Loyalty) ChangeBudgetCashBack(ctx context.Context, idCashBack int32, budget int32) (string, error) {
	ret := _m.Called(ctx, idCashBack, budget)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (string, error)); ok {
		return rf(ctx, idCashBack, budget)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) string); ok {
		r0 = rf(ctx, idCashBack, budget)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, idCashBack, budget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeConditionCashBack provides a mock function with given fields: ctx, idCashBack, condition
func (_m *Loyalty) ChangeConditionCashBack(ctx context.Context, idCashBack int32, condition string) (string, error) {
	ret := _m.Called(ctx, idCashBack, condition)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (string, error)); ok {
		return rf(ctx, idCashBack, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) string); ok {
		r0 = rf(ctx, idCashBack, condition)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, idCashBack, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeDateFinishActivePromoCode provides a mock function with given fields: ctx, name, dateFinish
func (_m *Loyalty) ChangeDateFinishActivePromoCode(ctx context.Context, name string, dateFinish string) (string, error) {
	ret := _m.Called(ctx, name, dateFinish)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, name, dateFinish)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, dateFinish)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, dateFinish)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeDateStartActivePromoCode provides a mock function with given fields: ctx, name, dateStartActive
func (_m *Loyalty) ChangeDateStartActivePromoCode(ctx context.Context, name string, dateStartActive string) (string, error) {
	ret := _m.Called(ctx, name, dateStartActive)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, name, dateStartActive)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, dateStartActive)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, dateStartActive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMaxCountUsesPromoCode provides a mock function with given fields: ctx, name, maxCountUses
func (_m *Loyalty) ChangeMaxCountUsesPromoCode(ctx context.Context, name string, maxCountUses int32) (string, error) {
	ret := _m.Called(ctx, name, maxCountUses)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (string, error)); ok {
		return rf(ctx, name, maxCountUses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) string); ok {
		r0 = rf(ctx, name, maxCountUses)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, name, maxCountUses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeNamePromoCode provides a mock function with given fields: ctx, name, newName
func (_m *Loyalty) ChangeNamePromoCode(ctx context.Context, name string, newName string) (string, error) {
	ret := _m.Called(ctx, name, newName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, name, newName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, newName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeTypeCashBack provides a mock function with given fields: ctx, idCashBack, typeCashBack
func (_m *Loyalty) ChangeTypeCashBack(ctx context.Context, idCashBack int32, typeCashBack int32) (string, error) {
	ret := _m.Called(ctx, idCashBack, typeCashBack)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (string, error)); ok {
		return rf(ctx, idCashBack, typeCashBack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) string); ok {
		r0 = rf(ctx, idCashBack, typeCashBack)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, idCashBack, typeCashBack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeTypeDiscountPromoCode provides a mock function with given fields: ctx, name, typeDiscount
func (_m *Loyalty) ChangeTypeDiscountPromoCode(ctx context.Context, name string, typeDiscount int32) (string, error) {
	ret := _m.Called(ctx, name, typeDiscount)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (string, error)); ok {
		return rf(ctx, name, typeDiscount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) string); ok {
		r0 = rf(ctx, name, typeDiscount)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, name, typeDiscount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeValueDiscountPromoCode provides a mock function with given fields: ctx, name, valueDiscount
func (_m *Loyalty) ChangeValueDiscountPromoCode(ctx context.Context, name string, valueDiscount int32) (string, error) {
	ret := _m.Called(ctx, name, valueDiscount)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (string, error)); ok {
		return rf(ctx, name, valueDiscount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) string); ok {
		r0 = rf(ctx, name, valueDiscount)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, name, valueDiscount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DebitingPromoBonuses provides a mock function with given fields: ctx, idClient, paymentStatus
func (_m *Loyalty) DebitingPromoBonuses(ctx context.Context, idClient int32, paymentStatus bool) (string, error) {
	ret := _m.Called(ctx, idClient, paymentStatus)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, bool) (string, error)); ok {
		return rf(ctx, idClient, paymentStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, bool) string); ok {
		r0 = rf(ctx, idClient, paymentStatus)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, bool) error); ok {
		r1 = rf(ctx, idClient, paymentStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCashBack provides a mock function with given fields: ctx, idCashBack
func (_m *Loyalty) DeleteCashBack(ctx context.Context, idCashBack int32) (string, error) {
	ret := _m.Called(ctx, idCashBack)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (string, error)); ok {
		return rf(ctx, idCashBack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) string); ok {
		r0 = rf(ctx, idCashBack)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, idCashBack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePromoCode provides a mock function with given fields: ctx, name
func (_m *Loyalty) DeletePromoCode(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCashBack provides a mock function with given fields: ctx
func (_m *Loyalty) GetAllCashBack(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromoCodes provides a mock function with given fields: ctx
func (_m *Loyalty) GetAllPromoCodes(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCashBack provides a mock function with given fields: ctx, idCashBack
func (_m *Loyalty) GetCashBack(ctx context.Context, idCashBack int32) (string, error) {
	ret := _m.Called(ctx, idCashBack)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (string, error)); ok {
		return rf(ctx, idCashBack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) string); ok {
		r0 = rf(ctx, idCashBack)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, idCashBack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoCode provides a mock function with given fields: ctx, name
func (_m *Loyalty) GetPromoCode(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettingUpBudget provides a mock function with given fields: ctx, typeCashBack, condition, valueBudget
func (_m *Loyalty) SettingUpBudget(ctx context.Context, typeCashBack int32, condition string, valueBudget int32) (string, error) {
	ret := _m.Called(ctx, typeCashBack, condition, valueBudget)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, int32) (string, error)); ok {
		return rf(ctx, typeCashBack, condition, valueBudget)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, int32) string); ok {
		r0 = rf(ctx, typeCashBack, condition, valueBudget)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, int32) error); ok {
		r1 = rf(ctx, typeCashBack, condition, valueBudget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoyalty interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoyalty creates a new instance of Loyalty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoyalty(t mockConstructorTestingTNewLoyalty) *Loyalty {
	mock := &Loyalty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
